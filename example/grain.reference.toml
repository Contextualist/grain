# An example grain config file for generating worker
# scripts. Entry marked as optional is showing its
# default value. Strings like {{HHMMSS}} are
# template-variable provided.
# (e.g. `{{HHMMSS}}` will be replaced by hhmmss
# representation of submission time). They are
# evaluated during submission.
# Try running `grain up -c THIS_FILE --dry` to see
# the worker job script generated.

# HPC job management system.
# Supported: "" (None), slurm, pbs
system = "" # optional

# Context module loaded in head and worker's runtime.
# If given, it should be the path to a Python file with an async context
# manager named `grain_context`.
# Can be overriden by `head.contextmod` and `worker.contextmod`.
contextmod = "" # optional

# Unified address for head-worker discorvery and head-CLI communication.
# Only applicable to protocols with symmetrical dial/listen address
# (i.e. Bridge and Edge)
address = "edge://$HOME/.local/share/edge-file-default"


[head]

# Name of head's job, if head is submitted as a HPC job
name = "grain_head" # optional

# Log of head's job, if head is submitted as a HPC job
main_log_file = "/dev/null" # optional

# Log of head's local worker
log_file = "" # optional, default (i.e. empty str) to stdout

# Head uses this URL to listen for incoming commands or worker
# connection. Supported protocols:
# TCP: "tcp://:{port}"
# Bridge: "bridge://{key}@{bridge_addr}:{bridge_port}[?iface={interface}]"
# Edge: "edge://{path_to_edge_file}"
listen = "" # optional, default to `address`

# Script to invoke your entrypoint. It is used to
# start the head process for `grain start`.
cmd = '''
python ENTRYPOINT.py
'''


# Parameters for the Gnaw daemon
[head.gnaw] # optional

# Whether to use Gnaw instead of the built-in scheduler
enabled = true

# Gnaw's log file, default (i.e. empty str) to stdout
log_file = ""

# Maximum number of running instances allowed to connect to Gnaw
max_conn = 8

# Time for Gnaw to exit after the last instance quits
idle_quit = "30m"

# Expected size of worker swarm for autoscale; default 0 to disable autoscale
swarm = 0

extra_args = []


# Override configs in `[script]` for head's job script.
# `[worker.script]` does similarly for worker's job script.
[head.script] # optional
walltime = "24:00:00"


[worker]

# Name of a worker's job
name = "w{{HHMMSS}}" # optional

# Log of a worker's job
log_file = "./w{{HHMMSS}}.log" # optional

# Workers use this URL to connect to the head.
# Supported protocols:
# TCP: "tcp://{addr}:{port}"
# Bridge: "bridge://{key}@{bridge_addr}:{bridge_port}[?iface={interface}]"
# Edge: "edge://{path_to_edge_file}"
dial = "" # optional, default to `address`

# Grain CLI uses this URL to send queries and commands
# to the head.
cli_dial = "" # optional, default to `worker.dial`


# Specify resources other than cores, memory, or walltime
[worker.res] # optional
Token = { token="has-gpu" }
Capacity = { V=8 }


# Parameters for filling out the HPC job script. Can be
# overridden by `[head.script]` or `[worker.script]`.
[script]

shebang = "#!/bin/bash" # optional
queue = "''" # optional
walltime = "" # optional
cores = 0 # optional
memory = 0 # optional
extra_args = [] # optional

# `defer` is a magic statement that makes the cmd
# in its line to be executed during clean up.
# All the other lines are setup commands to be
# executed before launching the worker process.
setup_cleanup = '''
source /etc/bash.bashrc.local
module load gaussian/16

export GAUSS_SCRDIR="/tmp/gauscr"
mkdir -p $GAUSS_SCRDIR
defer rm -r $GAUSS_SCRDIR
'''
